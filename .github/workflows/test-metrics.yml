name: 测试指标检查

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: '测试类型'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - code-quality
        - performance
        - security
        - e2e

env:
  NODE_VERSION: '20'
  NPM_VERSION: '10'

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'code-quality' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: TypeScript 类型检查
        run: npx tsc --noEmit

      - name: ESLint 代码规范检查
        run: npm run check

      - name: Stylelint 样式检查
        run: npx stylelint "**/*.{css,scss}" --max-warnings 0

      - name: 检查未使用的依赖
        run: npx depcheck --ignores="@types/*,babel-*,@babel/*,eslint-*,stylelint-*,@playwright/*,jest-*,@testing-library/*"

      - name: 检查包大小
        run: |
          echo "检查 node_modules 大小..."
          du -sh node_modules
          echo "检查 dist 目录大小（如果存在）..."
          if [ -d "dist" ]; then
            du -sh dist
          fi

      - name: 上传代码质量报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            stylelint-report.json
            depcheck-report.json

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'code-quality' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 运行 Jest 单元测试
        run: npm test
        env:
          CI: true

      - name: 生成测试覆盖率报告
        run: npm test -- --coverage --coverageReporters=text --coverageReporters=lcov

      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/

      - name: 检查测试覆盖率阈值
        run: |
          if [ -f "coverage/lcov-report/index.html" ]; then
            echo "测试覆盖率报告已生成"
            # 这里可以添加覆盖率阈值检查逻辑
          else
            echo "警告: 未找到测试覆盖率报告"
            exit 1
          fi

  # 构建测试
  build-test:
    name: 构建测试
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 开发环境构建测试
        run: npm run build:dev
        env:
          CI: true

      - name: 生产环境构建测试
        run: npm run build:production
        env:
          CI: true

      - name: 检查构建产物
        run: |
          echo "检查构建产物大小..."
          if [ -d "dist" ]; then
            du -sh dist
            echo "构建产物文件列表:"
            find dist -type f | head -20
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: dist/

  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 构建项目
        run: npm run build:production

      - name: 安装 Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 启动本地服务器
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 10

      - name: 运行 Lighthouse 性能测试
        run: |
          lhci autorun --config=./lighthouserc.json || true

      - name: 上传性能报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: .lighthouseci/

      - name: 检查包大小
        run: |
          echo "分析 JavaScript 包大小..."
          npx webpack-bundle-analyzer dist/static/js/*.js --mode static --report dist/bundle-report.html || true

  # 安全测试
  security-test:
    name: 安全测试
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 运行 npm audit
        run: npm audit --audit-level=moderate

      - name: 检查依赖漏洞
        run: |
          echo "检查已知安全漏洞..."
          npx audit-ci --moderate || true

      - name: 检查敏感信息泄露
        run: |
          echo "检查是否包含敏感信息..."
          if grep -r "password\|secret\|key\|token" src/ --exclude-dir=node_modules | grep -v "//" | grep -v "test"; then
            echo "警告: 发现可能的敏感信息"
            exit 1
          fi

      - name: 检查环境变量
        run: |
          echo "检查环境变量配置..."
          if [ -f ".env" ]; then
            echo "发现 .env 文件，请确保不包含敏感信息"
          fi

  # E2E 测试
  e2e-tests:
    name: E2E 测试
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps

      - name: 构建测试环境
        run: npm run build:mocked

      - name: 运行 Playwright E2E 测试
        run: npm run test:playwright
        env:
          CI: true

      - name: 上传 E2E 测试报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-reports
          path: playwright-report/

  # 兼容性测试
  compatibility-test:
    name: 浏览器兼容性测试
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event_name != 'workflow_dispatch'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps

      - name: 构建项目
        run: npm run build:mocked

      - name: 运行 ${{ matrix.browser }} 兼容性测试
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true

  # 最终报告
  generate-report:
    name: 生成测试报告
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build-test, performance-test, security-test, e2e-tests]
    if: always()
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有测试报告
        uses: actions/download-artifact@v4
        with:
          path: reports/

      - name: 生成测试总结报告
        run: |
          echo "# 测试指标报告" > test-summary.md
          echo "生成时间: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          echo "## 测试结果概览" >> test-summary.md
          echo "- 代码质量检查: ${{ needs.code-quality.result }}" >> test-summary.md
          echo "- 单元测试: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- 构建测试: ${{ needs.build-test.result }}" >> test-summary.md
          echo "- 性能测试: ${{ needs.performance-test.result }}" >> test-summary.md
          echo "- 安全测试: ${{ needs.security-test.result }}" >> test-summary.md
          echo "- E2E 测试: ${{ needs.e2e-tests.result }}" >> test-summary.md
          
          echo "" >> test-summary.md
          echo "## 详细报告" >> test-summary.md
          echo "请查看各个测试任务的详细输出和上传的报告文件。" >> test-summary.md

      - name: 上传测试总结报告
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md

      - name: 检查测试状态
        run: |
          if [ "${{ needs.code-quality.result }}" = "failure" ] || \
             [ "${{ needs.unit-tests.result }}" = "failure" ] || \
             [ "${{ needs.build-test.result }}" = "failure" ] || \
             [ "${{ needs.security-test.result }}" = "failure" ]; then
            echo "关键测试失败，请检查详细报告"
            exit 1
          fi 